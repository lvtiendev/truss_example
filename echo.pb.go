// Code generated by protoc-gen-go.
// source: echo.proto
// DO NOT EDIT!

/*
Package echo is a generated protocol buffer package.

The package name determines the name of the directories that truss creates
for `package echo;` truss will create the directory "echo-service".

It is generated from these files:
	echo.proto

It has these top-level messages:
	EchoRequest
	LouderRequest
	EchoResponse
*/
package echo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/tuneinc/truss/deftree/googlethirdparty"

import (
	context "golang.org/x/net/context"
	newcontext "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoRequest struct {
	In string `protobuf:"bytes,1,opt,name=In" json:"In,omitempty"`
}

func (m *EchoRequest) Reset()                    { *m = EchoRequest{} }
func (m *EchoRequest) String() string            { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()               {}
func (*EchoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LouderRequest struct {
	// In is the string to echo back
	In string `protobuf:"bytes,1,opt,name=In" json:"In,omitempty"`
	// Loudness is the number of exclamations marks to add to the echoed string
	Loudness int32 `protobuf:"varint,2,opt,name=Loudness" json:"Loudness,omitempty"`
}

func (m *LouderRequest) Reset()                    { *m = LouderRequest{} }
func (m *LouderRequest) String() string            { return proto.CompactTextString(m) }
func (*LouderRequest) ProtoMessage()               {}
func (*LouderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type EchoResponse struct {
	Out string `protobuf:"bytes,1,opt,name=Out" json:"Out,omitempty"`
}

func (m *EchoResponse) Reset()                    { *m = EchoResponse{} }
func (m *EchoResponse) String() string            { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()               {}
func (*EchoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*EchoRequest)(nil), "echo.EchoRequest")
	proto.RegisterType((*LouderRequest)(nil), "echo.LouderRequest")
	proto.RegisterType((*EchoResponse)(nil), "echo.EchoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Echo service

type EchoClient interface {
	// Echo "echos" the incoming string
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Louder "echos" the incoming string with `Loudness` additional exclamation marks
	Louder(ctx context.Context, in *LouderRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// LouderGet is the same as Louder, but pulls fields other than Loudness (i.e. In) from query params instead of POST
	LouderGet(ctx context.Context, in *LouderRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/echo.Echo/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) Louder(ctx context.Context, in *LouderRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/echo.Echo/Louder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) LouderGet(ctx context.Context, in *LouderRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/echo.Echo/LouderGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Echo service

type EchoServer interface {
	// Echo "echos" the incoming string
	Echo(newcontext.Context, *EchoRequest) (*EchoResponse, error)
	// Louder "echos" the incoming string with `Loudness` additional exclamation marks
	Louder(newcontext.Context, *LouderRequest) (*EchoResponse, error)
	// LouderGet is the same as Louder, but pulls fields other than Loudness (i.e. In) from query params instead of POST
	LouderGet(newcontext.Context, *LouderRequest) (*EchoResponse, error)
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.Echo/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_Louder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LouderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Louder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.Echo/Louder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Louder(ctx, req.(*LouderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_LouderGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LouderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).LouderGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.Echo/LouderGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).LouderGet(ctx, req.(*LouderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echo.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Echo_Echo_Handler,
		},
		{
			MethodName: "Louder",
			Handler:    _Echo_Louder_Handler,
		},
		{
			MethodName: "LouderGet",
			Handler:    _Echo_LouderGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("echo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xcd, 0x4a, 0x3b, 0x31,
	0x10, 0x67, 0xf7, 0xdf, 0x96, 0x76, 0xfe, 0x2a, 0x76, 0x14, 0x5a, 0x16, 0x84, 0xb2, 0xa7, 0xe2,
	0xa1, 0x01, 0xc5, 0x8b, 0x3d, 0xf9, 0x51, 0xb5, 0x20, 0x28, 0x3d, 0xf6, 0xd6, 0x6e, 0xc7, 0xdd,
	0x85, 0x9a, 0xac, 0xc9, 0xe4, 0x20, 0xe2, 0xc5, 0x27, 0x10, 0x7c, 0x34, 0x5f, 0xc1, 0x07, 0x91,
	0x4d, 0xaa, 0x54, 0x58, 0xc1, 0x53, 0x7e, 0x99, 0xfc, 0xbe, 0x86, 0x00, 0x50, 0x92, 0xa9, 0x41,
	0xa1, 0x15, 0x2b, 0xac, 0x95, 0x38, 0x3a, 0x4b, 0x73, 0xce, 0xec, 0x7c, 0x90, 0xa8, 0x7b, 0xc1,
	0x56, 0x52, 0x2e, 0x13, 0xc1, 0xda, 0x1a, 0x23, 0x16, 0x74, 0xc7, 0x9a, 0x48, 0xa4, 0x4a, 0xa5,
	0x4b, 0xe2, 0x2c, 0xd7, 0x8b, 0x62, 0xa6, 0xf9, 0x51, 0xcc, 0xa4, 0x54, 0x3c, 0xe3, 0x5c, 0x49,
	0xe3, 0xad, 0xe2, 0x3d, 0xf8, 0x3f, 0x4a, 0x32, 0x35, 0xa1, 0x07, 0x4b, 0x86, 0x71, 0x0b, 0xc2,
	0xb1, 0xec, 0x06, 0xbd, 0xa0, 0xdf, 0x9a, 0x84, 0x63, 0x19, 0x0f, 0x61, 0xf3, 0x5a, 0xd9, 0x05,
	0xe9, 0x5f, 0x08, 0x18, 0x41, 0xb3, 0x24, 0x48, 0x32, 0xa6, 0x1b, 0xf6, 0x82, 0x7e, 0x7d, 0xf2,
	0x7d, 0x8f, 0x7b, 0xb0, 0xe1, 0xbd, 0x4d, 0xa1, 0xa4, 0x21, 0xdc, 0x86, 0x7f, 0x37, 0x96, 0x57,
	0xe2, 0x12, 0x1e, 0xbc, 0x86, 0x50, 0x2b, 0x29, 0x78, 0xb1, 0x3a, 0xdb, 0x03, 0xb7, 0xe6, 0x5a,
	0xa5, 0x08, 0xd7, 0x47, 0xde, 0x29, 0xee, 0xbc, 0xbc, 0x7f, 0xbc, 0x85, 0x6d, 0xac, 0x8b, 0xf2,
	0x6d, 0xda, 0xc4, 0x86, 0x03, 0x02, 0x25, 0x34, 0x7c, 0x5f, 0xdc, 0xf1, 0xb2, 0x1f, 0xed, 0x2b,
	0xbd, 0x86, 0xce, 0xeb, 0xe8, 0x34, 0x82, 0xda, 0xd5, 0xe8, 0xe4, 0x1c, 0x51, 0x2c, 0x9d, 0x46,
	0x3c, 0x7d, 0x2d, 0xf2, 0x3c, 0xed, 0xc4, 0x15, 0xd3, 0xe3, 0x60, 0x1f, 0x6f, 0xa1, 0xe5, 0x13,
	0x2e, 0x89, 0xff, 0x1e, 0x19, 0xb9, 0xc8, 0xdd, 0xaa, 0xa8, 0x79, 0xc3, 0xfd, 0xcb, 0xe1, 0x67,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xef, 0x15, 0xa9, 0xf0, 0x01, 0x00, 0x00,
}
